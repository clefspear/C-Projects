
Lab3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000174  000001e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000174  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000228  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007a5  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006e0  00000000  00000000  00000a3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002f0  00000000  00000000  0000111d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001410  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ad  00000000  00000000  00001454  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b3  00000000  00000000  00001801  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000018b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e7       	ldi	r30, 0x74	; 116
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 63 00 	call	0xc6	; 0xc6 <main>
  8e:	0c 94 b8 00 	jmp	0x170	; 0x170 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <USART_intlize>:


// function to initialize USART
void USART_intlize (void)			
{
	UBRR0H  = (BAUDRATE>>8);			// Set UBRRHigh -> Shift the register right by 8 bits
  96:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	UBRR0L  = BAUDRATE;					// Set UBRRLow -> Set BAUD rate
  9a:	87 e6       	ldi	r24, 0x67	; 103
  9c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	UCSR0B |= ((1<<TXEN0)|(1<<RXEN0));	// Set register B; TXEN -> Enable receiver, RXEN -> transmitter
  a0:	e1 ec       	ldi	r30, 0xC1	; 193
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	80 81       	ld	r24, Z
  a6:	88 61       	ori	r24, 0x18	; 24
  a8:	80 83       	st	Z, r24
	UCSR0C |= ((1<<UCSZ00)|(1<<UCSZ01));// Set register C; UCSZ00 -> 8bit data format,USBS -> 1 stop-bit initially 0
  aa:	e2 ec       	ldi	r30, 0xC2	; 194
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	86 60       	ori	r24, 0x06	; 6
  b2:	80 83       	st	Z, r24
  b4:	08 95       	ret

000000b6 <USART_transm>:
}

void USART_transm(unsigned char data)	
{
	while (! ( UCSR0A & (1<<UDRE0) ) );	// While buffer; Check register A; check location to see if register is empty
  b6:	e0 ec       	ldi	r30, 0xC0	; 192
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	90 81       	ld	r25, Z
  bc:	95 ff       	sbrs	r25, 5
  be:	fd cf       	rjmp	.-6      	; 0xba <USART_transm+0x4>
	UDR0 = data;						// Load data into the USART data register
  c0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
  c4:	08 95       	ret

000000c6 <main>:
{'7','8','9','C'},
{'*','0','#','D'}};

int main(void)
{
	USART_intlize();							// Initialize USART
  c6:	0e 94 4b 00 	call	0x96	; 0x96 <USART_intlize>
	unsigned int r = 0;
	unsigned int c = 0;
	DDRB &= ~((1<<0)|(1<<1)|(1<<2)|(1<<3)); 	//Set PORTB as input 0
  ca:	84 b1       	in	r24, 0x04	; 4
  cc:	80 7f       	andi	r24, 0xF0	; 240
  ce:	84 b9       	out	0x04, r24	; 4
	DDRD |= ((1<<4)|(1<<5)|(1<<6)|(1<<7)); 		//Set PORTD as output 1
  d0:	8a b1       	in	r24, 0x0a	; 10
  d2:	80 6f       	ori	r24, 0xF0	; 240
  d4:	8a b9       	out	0x0a, r24	; 10
	PORTB |= ((1<<0)|(1<<1)|(1<<2)|(1<<3));		//Pull-up resistor enabled by default at 1
  d6:	85 b1       	in	r24, 0x05	; 5
  d8:	8f 60       	ori	r24, 0x0F	; 15
  da:	85 b9       	out	0x05, r24	; 5
	PORTD |= ((1<<4)|(1<<5)|(1<<6)|(1<<7));		//Sets Ports on rows as outputs high
  dc:	8b b1       	in	r24, 0x0b	; 11
  de:	80 6f       	ori	r24, 0xF0	; 240
  e0:	8b b9       	out	0x0b, r24	; 11
	
	while (1)
	{
		for(r=0; r< 4; r++)
		{
			PORTD &= ~(1<<(r+4));						//Set PORT LOW one at a time to check
  e2:	aa 24       	eor	r10, r10
  e4:	a3 94       	inc	r10
  e6:	b1 2c       	mov	r11, r1
  e8:	0f 2e       	mov	r0, r31
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	cf 2e       	mov	r12, r31
  ee:	f1 e0       	ldi	r31, 0x01	; 1
  f0:	df 2e       	mov	r13, r31
  f2:	f0 2d       	mov	r31, r0
{'4','5','6','B'},
{'7','8','9','C'},
{'*','0','#','D'}};

int main(void)
{
  f4:	68 94       	set
  f6:	88 24       	eor	r8, r8
  f8:	82 f8       	bld	r8, 2
  fa:	91 2c       	mov	r9, r1
	
	while (1)
	{
		for(r=0; r< 4; r++)
		{
			PORTD &= ~(1<<(r+4));						//Set PORT LOW one at a time to check
  fc:	8b b1       	in	r24, 0x0b	; 11
  fe:	75 01       	movw	r14, r10
 100:	08 2c       	mov	r0, r8
 102:	02 c0       	rjmp	.+4      	; 0x108 <main+0x42>
 104:	ee 0c       	add	r14, r14
 106:	ff 1c       	adc	r15, r15
 108:	0a 94       	dec	r0
 10a:	e2 f7       	brpl	.-8      	; 0x104 <main+0x3e>
 10c:	9e 2d       	mov	r25, r14
 10e:	90 95       	com	r25
 110:	89 23       	and	r24, r25
 112:	8b b9       	out	0x0b, r24	; 11
 114:	86 01       	movw	r16, r12
			for(c=0;c<=3; c++)
 116:	c0 e0       	ldi	r28, 0x00	; 0
 118:	d0 e0       	ldi	r29, 0x00	; 0
			{
					
				if ((!(PINB & (1<<c))))				//Checking if push button is pressed
 11a:	83 b1       	in	r24, 0x03	; 3
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	0c 2e       	mov	r0, r28
 120:	02 c0       	rjmp	.+4      	; 0x126 <main+0x60>
 122:	95 95       	asr	r25
 124:	87 95       	ror	r24
 126:	0a 94       	dec	r0
 128:	e2 f7       	brpl	.-8      	; 0x122 <main+0x5c>
 12a:	80 fd       	sbrc	r24, 0
 12c:	0d c0       	rjmp	.+26     	; 0x148 <main+0x82>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12e:	8f ef       	ldi	r24, 0xFF	; 255
 130:	92 e5       	ldi	r25, 0x52	; 82
 132:	e7 e0       	ldi	r30, 0x07	; 7
 134:	81 50       	subi	r24, 0x01	; 1
 136:	90 40       	sbci	r25, 0x00	; 0
 138:	e0 40       	sbci	r30, 0x00	; 0
 13a:	e1 f7       	brne	.-8      	; 0x134 <main+0x6e>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <main+0x78>
 13e:	00 00       	nop
				{
					_delay_ms(150);//Delay for button bounce
					USART_transm(keyboard[r][c]);	//Transmit the index [r][c]
 140:	f8 01       	movw	r30, r16
 142:	80 81       	ld	r24, Z
 144:	0e 94 5b 00 	call	0xb6	; 0xb6 <USART_transm>
	while (1)
	{
		for(r=0; r< 4; r++)
		{
			PORTD &= ~(1<<(r+4));						//Set PORT LOW one at a time to check
			for(c=0;c<=3; c++)
 148:	21 96       	adiw	r28, 0x01	; 1
 14a:	0f 5f       	subi	r16, 0xFF	; 255
 14c:	1f 4f       	sbci	r17, 0xFF	; 255
 14e:	c4 30       	cpi	r28, 0x04	; 4
 150:	d1 05       	cpc	r29, r1
 152:	19 f7       	brne	.-58     	; 0x11a <main+0x54>
				{
					_delay_ms(150);//Delay for button bounce
					USART_transm(keyboard[r][c]);	//Transmit the index [r][c]
				}
			}
			PORTD |= (1<<(r+4));						//Set PORT back to HIGH after checking entire row
 154:	8b b1       	in	r24, 0x0b	; 11
 156:	e8 2a       	or	r14, r24
 158:	eb b8       	out	0x0b, r14	; 11
 15a:	ff ef       	ldi	r31, 0xFF	; 255
 15c:	8f 1a       	sub	r8, r31
 15e:	9f 0a       	sbc	r9, r31
 160:	24 e0       	ldi	r18, 0x04	; 4
 162:	c2 0e       	add	r12, r18
 164:	d1 1c       	adc	r13, r1
	PORTB |= ((1<<0)|(1<<1)|(1<<2)|(1<<3));		//Pull-up resistor enabled by default at 1
	PORTD |= ((1<<4)|(1<<5)|(1<<6)|(1<<7));		//Sets Ports on rows as outputs high
	
	while (1)
	{
		for(r=0; r< 4; r++)
 166:	88 e0       	ldi	r24, 0x08	; 8
 168:	88 16       	cp	r8, r24
 16a:	91 04       	cpc	r9, r1
 16c:	39 f6       	brne	.-114    	; 0xfc <main+0x36>
 16e:	bc cf       	rjmp	.-136    	; 0xe8 <main+0x22>

00000170 <_exit>:
 170:	f8 94       	cli

00000172 <__stop_program>:
 172:	ff cf       	rjmp	.-2      	; 0x172 <__stop_program>
