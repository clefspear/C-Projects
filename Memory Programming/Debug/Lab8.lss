
Lab8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000019c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000148  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001cc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  00000210  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008af  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006bc  00000000  00000000  00000b3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000410  00000000  00000000  000011fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  0000160c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000381  00000000  00000000  00001690  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ce  00000000  00000000  00001a11  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001adf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__vector_14>
  3c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__vector_15>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 84 00 	call	0x108	; 0x108 <main>
  78:	0c 94 a2 00 	jmp	0x144	; 0x144 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <init>:
#include <stdint.h>
#include <avr/eeprom.h>

void init(void)
{
	OCR0A = 0x4D;                            		//Set 5ms period, 77
  80:	8d e4       	ldi	r24, 0x4D	; 77
  82:	87 bd       	out	0x27, r24	; 39
	TCCR0A |= (1 << WGM01);							//CTC Mode
  84:	84 b5       	in	r24, 0x24	; 36
  86:	82 60       	ori	r24, 0x02	; 2
  88:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS00)|(1 << CS02);				//Pre-scale = 1024
  8a:	85 b5       	in	r24, 0x25	; 37
  8c:	85 60       	ori	r24, 0x05	; 5
  8e:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1 << OCIE0A)|(1 << OCIE0B);			//COMPA vect and COMPB vect;
  90:	ee e6       	ldi	r30, 0x6E	; 110
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	86 60       	ori	r24, 0x06	; 6
  98:	80 83       	st	Z, r24
	sei(); //enable interrupts
  9a:	78 94       	sei
  9c:	08 95       	ret

0000009e <__vector_14>:
}

ISR (TIMER0_COMPA_vect)
{
  9e:	1f 92       	push	r1
  a0:	0f 92       	push	r0
  a2:	0f b6       	in	r0, 0x3f	; 63
  a4:	0f 92       	push	r0
  a6:	11 24       	eor	r1, r1
  a8:	8f 93       	push	r24
	if(OCR0B != 0x00)
  aa:	88 b5       	in	r24, 0x28	; 40
  ac:	81 11       	cpse	r24, r1
	LED_ON;
  ae:	2d 9a       	sbi	0x05, 5	; 5
}
  b0:	8f 91       	pop	r24
  b2:	0f 90       	pop	r0
  b4:	0f be       	out	0x3f, r0	; 63
  b6:	0f 90       	pop	r0
  b8:	1f 90       	pop	r1
  ba:	18 95       	reti

000000bc <__vector_15>:
ISR (TIMER0_COMPB_vect)
{
  bc:	1f 92       	push	r1
  be:	0f 92       	push	r0
  c0:	0f b6       	in	r0, 0x3f	; 63
  c2:	0f 92       	push	r0
  c4:	11 24       	eor	r1, r1
  c6:	8f 93       	push	r24
	if(OCR0B < 0x4E)								//78
  c8:	88 b5       	in	r24, 0x28	; 40
  ca:	8e 34       	cpi	r24, 0x4E	; 78
  cc:	08 f4       	brcc	.+2      	; 0xd0 <__vector_15+0x14>
	LED_OFF;
  ce:	2d 98       	cbi	0x05, 5	; 5
}
  d0:	8f 91       	pop	r24
  d2:	0f 90       	pop	r0
  d4:	0f be       	out	0x3f, r0	; 63
  d6:	0f 90       	pop	r0
  d8:	1f 90       	pop	r1
  da:	18 95       	reti

000000dc <EEPROM>:
void EEPROM(void)
{
	uint8_t Read;								//Variables for read and write BYTES
	uint8_t Load;
	
	Read = eeprom_read_byte((uint8_t*)0x22);	//Read BYTE in a location of EEPROM
  dc:	82 e2       	ldi	r24, 0x22	; 34
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	0e 94 8c 00 	call	0x118	; 0x118 <eeprom_read_byte>
	
	if(Read < 0x4D)								//Check if BYTE read is less than 10
  e4:	8d 34       	cpi	r24, 0x4D	; 77
  e6:	40 f4       	brcc	.+16     	; 0xf8 <EEPROM+0x1c>
	{
		OCR0B = Read;							//Set OCR0B as read BYTE
  e8:	88 bd       	out	0x28, r24	; 40
		Load = Read + 0x08;					//Add BYTE by 8(about 10% of 77)
		eeprom_write_byte((uint8_t*)0x22, Load);//Increase LED by 10. 
  ea:	68 e0       	ldi	r22, 0x08	; 8
  ec:	68 0f       	add	r22, r24
  ee:	82 e2       	ldi	r24, 0x22	; 34
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	0e 94 94 00 	call	0x128	; 0x128 <eeprom_write_byte>
  f6:	08 95       	ret
												//(0x22) Location of EEProm Address Register High Byte
	}
	
	else
	{
		OCR0B = 0x4E;								//If BYTE read is greater than 10
  f8:	8e e4       	ldi	r24, 0x4E	; 78
  fa:	88 bd       	out	0x28, r24	; 40
		Load = 0x00;							//Reset OCR0B to zero on next turn on
		eeprom_write_byte((uint8_t*)0x22, Load);//Reset LED to 0
  fc:	60 e0       	ldi	r22, 0x00	; 0
  fe:	82 e2       	ldi	r24, 0x22	; 34
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	0e 94 94 00 	call	0x128	; 0x128 <eeprom_write_byte>
 106:	08 95       	ret

00000108 <main>:
	}
}
int main(void)
{
	cli();				//disable global interrupts
 108:	f8 94       	cli
	DDRB  |= (1<<5);	// Set PinB5(LED) as an OUTPUT
 10a:	25 9a       	sbi	0x04, 5	; 4
	LED_OFF;			// Default OFF
 10c:	2d 98       	cbi	0x05, 5	; 5
	init();
 10e:	0e 94 40 00 	call	0x80	; 0x80 <init>
	EEPROM();
 112:	0e 94 6e 00 	call	0xdc	; 0xdc <EEPROM>
 116:	ff cf       	rjmp	.-2      	; 0x116 <main+0xe>

00000118 <eeprom_read_byte>:
 118:	f9 99       	sbic	0x1f, 1	; 31
 11a:	fe cf       	rjmp	.-4      	; 0x118 <eeprom_read_byte>
 11c:	92 bd       	out	0x22, r25	; 34
 11e:	81 bd       	out	0x21, r24	; 33
 120:	f8 9a       	sbi	0x1f, 0	; 31
 122:	99 27       	eor	r25, r25
 124:	80 b5       	in	r24, 0x20	; 32
 126:	08 95       	ret

00000128 <eeprom_write_byte>:
 128:	26 2f       	mov	r18, r22

0000012a <eeprom_write_r18>:
 12a:	f9 99       	sbic	0x1f, 1	; 31
 12c:	fe cf       	rjmp	.-4      	; 0x12a <eeprom_write_r18>
 12e:	1f ba       	out	0x1f, r1	; 31
 130:	92 bd       	out	0x22, r25	; 34
 132:	81 bd       	out	0x21, r24	; 33
 134:	20 bd       	out	0x20, r18	; 32
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	f8 94       	cli
 13a:	fa 9a       	sbi	0x1f, 2	; 31
 13c:	f9 9a       	sbi	0x1f, 1	; 31
 13e:	0f be       	out	0x3f, r0	; 63
 140:	01 96       	adiw	r24, 0x01	; 1
 142:	08 95       	ret

00000144 <_exit>:
 144:	f8 94       	cli

00000146 <__stop_program>:
 146:	ff cf       	rjmp	.-2      	; 0x146 <__stop_program>
